# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'test.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from PyQt5.QtWidgets import QMainWindow, QMessageBox
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage, QPixmap
from PyQt5.QtCore import QThread, pyqtSignal, QTimer
import open3d as o3d
import numpy as np
import serial
import cv2

import utils


class SerialThread(QThread):
    data_received = pyqtSignal(str)

    def __init__(self, port, baudrate, stopbits, parity, bytesize):
        super(SerialThread, self).__init__()
        self.serial = serial.Serial(
            port=port,
            baudrate=baudrate,
            stopbits=stopbits,
            parity=parity,
            bytesize=bytesize,
            timeout=1,
        )
        self.running = True

    def run(self):
        while self.running:
            if self.serial.isOpen():
                data = self.serial.readline()
                if data:
                    self.data_received.emit(data.decode("utf-8"))

    def send_data(self, data):
        if self.serial.isOpen():
            self.serial.write(data.encode("utf-8"))

    def stop(self):
        self.running = False
        if self.serial.isOpen():
            self.serial.close()


class Worker(QThread):
    finished = pyqtSignal(np.ndarray)
    error = pyqtSignal(Exception)

    def __init__(self, serial_thread):
        super().__init__()
        self.serial_thread = serial_thread
        self.target_points = 315

    def run(self):
        try:
            utils.run_zero_shape()

            filename = "ZeroShape/my_examples/preds/IMG_20240504_212911_mesh.xyz"
            # sphere_points = utils.read_xyz_file(filename)
            sd_points = utils.read_xyz(filename)
            point_cloud = o3d.geometry.PointCloud()
            point_cloud.points = o3d.utility.Vector3dVector(sd_points)
            downsampled_cloud, final_voxel_size = utils.adjust_voxel_size(
                point_cloud, self.target_points
            )
            print(1)
            utils.save_xyz(downsampled_cloud)

            filename = "output.xyz"

            print(final_voxel_size)

            sphere_points = utils.read_xyz_file(filename)
            normalized_points = utils.normalize_points(sphere_points)

            points_array = np.array([[p.x, p.y, p.z] for p in normalized_points])

            np.savetxt("test.xyz", points_array, fmt="%.6f", comments="")
            utils.send_points_via_serial(normalized_points, self.serial_thread.serial)
            pcd = o3d.io.read_point_cloud(filename)  # 假设文件是以 .xyz 格式存储
            points = np.asarray(pcd.points)
            self.finished.emit(points)

            # self.finished.emit()  # 任务完成时发送完成信号
        except Exception as e:
            self.error.emit(e)  # 发送错误信号


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1283, 671)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(11, 61, 850, 486))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("image.png"))
        self.label.setScaledContents(True)
        self.label.setObjectName("label")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(1070, 344, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(1170, 344, 93, 28))
        self.pushButton_2.setCheckable(False)
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(1070, 396, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(1170, 396, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setGeometry(QtCore.QRect(1070, 448, 93, 28))
        self.pushButton_5.setObjectName("pushButton_5")
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setGeometry(QtCore.QRect(1170, 448, 93, 28))
        self.pushButton_6.setObjectName("pushButton_6")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setGeometry(QtCore.QRect(11, 554, 1041, 87))
        self.textBrowser.setObjectName("textBrowser")
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setGeometry(QtCore.QRect(920, 520, 87, 19))
        self.radioButton.setObjectName("radioButton")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setGeometry(QtCore.QRect(1070, 500, 93, 28))
        self.pushButton_7.setObjectName("pushButton_7")
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setGeometry(QtCore.QRect(1170, 500, 93, 28))
        self.pushButton_8.setObjectName("pushButton_8")
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setGeometry(QtCore.QRect(1078, 562, 93, 28))
        self.pushButton_9.setObjectName("pushButton_9")
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setGeometry(QtCore.QRect(1078, 609, 93, 28))
        self.pushButton_10.setObjectName("pushButton_10")
        self.comboBox_2 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_2.setGeometry(QtCore.QRect(960, 355, 87, 21))
        self.comboBox_2.setObjectName("comboBox_2")
        self.comboBox_2.addItem("")
        self.comboBox_2.addItem("")
        self.comboBox_3 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_3.setGeometry(QtCore.QRect(960, 400, 87, 21))
        self.comboBox_3.setObjectName("comboBox_3")
        self.comboBox_3.addItem("")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(870, 355, 45, 16))
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        self.label_3.setGeometry(QtCore.QRect(870, 400, 45, 16))
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        self.label_4.setGeometry(QtCore.QRect(870, 445, 45, 16))
        self.label_4.setObjectName("label_4")
        self.comboBox_4 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_4.setGeometry(QtCore.QRect(960, 445, 87, 21))
        self.comboBox_4.setObjectName("comboBox_4")
        self.comboBox_4.addItem("")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        self.label_5.setGeometry(QtCore.QRect(870, 490, 45, 16))
        self.label_5.setObjectName("label_5")
        self.comboBox_5 = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox_5.setGeometry(QtCore.QRect(960, 490, 87, 21))
        self.comboBox_5.setObjectName("comboBox_5")
        self.comboBox_5.addItem("")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        self.label_6.setGeometry(QtCore.QRect(880, 70, 381, 251))
        self.label_6.setText("")
        self.label_6.setPixmap(QtGui.QPixmap("image.png"))
        self.label_6.setScaledContents(True)
        self.label_6.setObjectName("label_6")
        self.label_7 = QtWidgets.QLabel(self.centralwidget)
        self.label_7.setGeometry(QtCore.QRect(490, 10, 361, 41))
        font = QtGui.QFont()
        font.setFamily("黑体")
        font.setPointSize(24)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(1180, 560, 81, 71))
        self.lineEdit.setObjectName("lineEdit")

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", "电机1正转"))
        self.pushButton_2.setText(_translate("MainWindow", "电机1反转"))
        self.pushButton_3.setText(_translate("MainWindow", "电机2正转"))
        self.pushButton_4.setText(_translate("MainWindow", "电机2反转"))
        self.pushButton_5.setText(_translate("MainWindow", "开始实验"))
        self.pushButton_6.setText(_translate("MainWindow", "停止实验"))
        self.radioButton.setText(_translate("MainWindow", "打开串口"))
        self.pushButton_7.setText(_translate("MainWindow", "保存窗口"))
        self.pushButton_8.setText(_translate("MainWindow", "打开摄像头"))
        self.pushButton_9.setText(_translate("MainWindow", "发送"))
        self.pushButton_10.setText(_translate("MainWindow", "清除发送"))
        self.comboBox_2.setItemText(0, _translate("MainWindow", "115200"))
        self.comboBox_2.setItemText(1, _translate("MainWindow", "9600"))
        self.comboBox_3.setItemText(0, _translate("MainWindow", "1"))
        self.label_2.setText(_translate("MainWindow", "波特率"))
        self.label_3.setText(_translate("MainWindow", "停止位"))
        self.label_4.setText(_translate("MainWindow", "数据位"))
        self.comboBox_4.setItemText(0, _translate("MainWindow", "8"))
        self.label_5.setText(_translate("MainWindow", "检验位"))
        self.comboBox_5.setItemText(0, _translate("MainWindow", "0"))
        self.textBrowser.setText(_translate("MainWindow", ""))  # 串口信息输出
        self.label_7.setText(_translate("MainWindow", "2024 共创芯未来"))


def load_xyz(filename):
    """读取.xyz文件"""
    points = np.loadtxt(filename, skiprows=1)  # 假设文件的第一行是头信息
    return points


class MainWindow(QMainWindow, Ui_MainWindow):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)
        self.setupUi(self)
        self.retranslateUi(self)
        self._translate = QtCore.QCoreApplication.translate
        self.serial_thread = None
        self.worker = None
        self.target_string_detected = 0

        # 连接打开串口按钮的信号
        self.radioButton.clicked.connect(self.toggle_serial_port)
        self.pushButton_9.clicked.connect(self.send_serial_data)
        self.pushButton_5.clicked.connect(self.start)
        self.pushButton_8.clicked.connect(self.toggle_camera)

        self.pushButton.clicked.connect(self.pushButtonref)
        self.pushButton_2.clicked.connect(self.pushButtonref2)
        self.pushButton_3.clicked.connect(self.pushButtonref3)
        self.pushButton_4.clicked.connect(self.pushButtonref4)

        self.cap = cv2.VideoCapture(0)  # 0 代表默认摄像头
        self.timer = QTimer(self)
        self.timer.timeout.connect(self.update_frame)
        self.timer.start(30)  # 以毫秒为单位的定时器，这里是30毫秒

        # 假设你的QLabel的名字就是label
        self.label.setScaledContents(True)  # 根据 QLabel 大小缩放图像
        xyz = load_xyz("output.xyz")
        self.display_point_cloud(xyz)

    def toggle_camera(self):
        # 新的摄像头连接信息
        ip_address = "192.168.10.90"
        port = "554"
        username = "admin"
        password = "123456"
        stream_path = "/stream1"
        stream_url = f"rtsp://{username}:{password}@{ip_address}:{port}{stream_path}"

        # 尝试创建新的视频捕获对象
        new_cap = cv2.VideoCapture(stream_url)
        print("Try to open camera")

        if new_cap.isOpened():  # 成功打开新的视频流
            if self.cap is not None:
                self.cap.release()  # 释放旧的视频流
            self.cap = new_cap  # 更新视频流对象
            self.pushButton_8.setText(self._translate("MainWindow", "关闭摄像头"))
            QMessageBox.information(self, "摄像头状态", "摄像头已成功打开")
        else:
            new_cap.release()  # 释放失败的尝试
            if self.cap is not None:
                QMessageBox.warning(
                    self, "摄像头状态", "无法打开新的摄像头，保持当前摄像头"
                )
            else:
                QMessageBox.critical(self, "摄像头状态", "无法打开摄像头")
                self.pushButton_8.setText(self._translate("MainWindow", "打开摄像头"))

    def pushButtonref(self):
        if self.serial_thread:
            self.serial_thread.send_data("H")

    def pushButtonref2(self):
        if self.serial_thread:
            self.serial_thread.send_data("J")

    def pushButtonref3(self):
        if self.serial_thread:
            self.serial_thread.send_data("K")

    def pushButtonref4(self):
        if self.serial_thread:
            self.serial_thread.send_data("L")

    def start(self):
        utils.save_frame_from_stream(self.cap)
        if self.serial_thread:
            self.serial_thread.send_data("TR")
        if self.target_string_detected:
            self.start_long_task()

    def start_long_task(self):
        if self.target_string_detected:
            self.worker = Worker(self.serial_thread)
            self.worker.finished.connect(self.on_task_finished)
            self.worker.error.connect(self.on_task_error)
            self.worker.start()

    def display_point_cloud(self, points):
        # 使用 Open3D 创建点云对象
        pcd = o3d.geometry.PointCloud()
        pcd.points = o3d.utility.Vector3dVector(points)

        # 可视化
        vis = o3d.visualization.Visualizer()
        vis.create_window(visible=False)  # 创建一个不可见的窗口
        vis.add_geometry(pcd)
        vis.update_geometry(pcd)
        vis.poll_events()
        vis.update_renderer()

        # 从视窗捕获图像
        image = np.asarray(vis.capture_screen_float_buffer(False))
        vis.destroy_window()

        image = (image * 255).astype(np.uint8)
        image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        height, width, channels = image.shape
        bytesPerLine = 3 * width
        qImg = QImage(image.data, width, height, bytesPerLine, QImage.Format_RGB888)
        self.label_6.setPixmap(QPixmap.fromImage(qImg))

    def on_task_finished(self, points):
        self.display_point_cloud(points)
        print("任务完成")

    def on_task_error(self, e):
        print(f"发生错误: {e}")
        QtWidgets.QMessageBox.critical(self, "Error", str(e))
        self.worker = None

    def update_frame(self):
        ret, frame = self.cap.read()
        if ret:
            rgb_image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
            h, w, ch = rgb_image.shape
            bytes_per_line = ch * w
            convert_to_Qt_format = QImage(
                rgb_image.data, w, h, bytes_per_line, QImage.Format_RGB888
            )
            p = convert_to_Qt_format.scaled(
                self.label.width(), self.label.height(), QtCore.Qt.KeepAspectRatio
            )
            self.label.setPixmap(QPixmap.fromImage(p))

    def toggle_serial_port(self):
        if self.radioButton.isChecked():
            self.serial_thread = SerialThread(
                "COM13",
                115200,
                serial.STOPBITS_ONE,
                serial.PARITY_NONE,
                serial.EIGHTBITS,
            )
            self.serial_thread.data_received.connect(self.display_serial_data)
            self.serial_thread.start()
            self.textBrowser.append("串口已打开")
        else:
            if self.serial_thread:
                self.serial_thread.stop()
                self.textBrowser.append("串口已关闭")

    def send_serial_data(self):
        data = self.lineEdit.text()  # 假设你从某个 QLineEdit 获取发送数据
        if self.serial_thread:
            self.serial_thread.send_data(data)
            # self.textBrowser.append(f"发送: {data}")

    def display_serial_data(self, data):
        self.textBrowser.append(f"{data}")
        if "OP" in data:
            self.target_string_detected = 1
            print("检测到特定字符串 'OP'，变量已设置为1")
        if "START" in data:
            utils.save_frame_from_stream(self.cap)
            self.start_long_task()

    def closeEvent(self, event):
        self.cap.release()
        self.timer.stop()
        if self.serial_thread:
            self.serial_thread.stop()


def main():
    app = QtWidgets.QApplication(sys.argv)
    main_window = MainWindow()
    main_window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
